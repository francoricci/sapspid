{
  "swagger": "2.0",
  "info": {
    "version": "2.1",
    "title": "SP Spid",
    "description": "SPID gateway. API to easily work with SPID",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "contact": {
      "email": "franco.ricc@gmail.com"
    }
  },
  "host": "spid.uniroma1.it",
  "basePath": "/api",
  "tags": [
    {
      "name": "jwt",
      "description": "Manipulate JWT token"
    },
    {
      "name": "metadata",
      "description": "Manage metadata"
    },
    {
      "name": "saml",
      "description": "work with saml assertions"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/version": {
      "get": {
        "description": "get api version",
        "summary": "version",
        "tags": [
          "misc"
        ],
        "operationId": "version",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": []
      }
    },
    "/jwt/getByType": {
      "get": {
        "description": "Encode a jwt token specifying a token type as in jwt.token_type table",
        "summary": "Encode a jwt token of type specified",
        "tags": [
          "jwt"
        ],
        "operationId": "get token by type",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "token type. jwt1: sha-256, jwt2: sha-384, jwt3: sha-512, jwt1_es256: jwt ECDSA 256 asymmetric keys",
            "default": "jwt1",
            "enum": [
              "jwt1",
              "jwt2",
              "jwt3",
              "jwt1_formez",
              "jwt2_formez",
              "jwt3_formez",
              "jwt1_es256"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New token createtd",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenOK"
              }
            }
          },
          "404": {
            "description": "Token type not found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": []
      }
    },
    "/jwt/verify": {
      "get": {
        "description": "Check validity of jwt token",
        "summary": "verify token",
        "tags": [
          "jwt"
        ],
        "operationId": "verify token - get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "jwt token"
          }
        ],
        "responses": {
          "200": {
            "description": "token valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenValid"
              }
            }
          },
          "401": {
            "description": "token not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "description": "Check validity of jwt token",
        "summary": "verify token",
        "tags": [
          "jwt"
        ],
        "operationId": "verify token - post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyTokenrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenValid"
              }
            }
          },
          "401": {
            "description": "token not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "404": {
            "description": "no token found to verify",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/metadata": {
      "get": {
        "description": "Get provider metadat stored in saml.metadata table",
        "summary": "get provider metadata",
        "tags": [
          "metadata"
        ],
        "operationId": "get provider metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /prvd service.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return provider metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/getMetadataResponse"
              }
            }
          },
          "404": {
            "description": "no metadata found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/prvd/{cod_prvd}/metadata"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "get provider metadata",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/metadata/verify": {
      "post": {
        "description": "verify metadata validity",
        "summary": "verify metadata signature and xml schema",
        "tags": [
          "metadata"
        ],
        "operationId": "verify metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyMetadatarequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "metadata valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataValid"
              }
            }
          },
          "401": {
            "description": "metadata not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/metadata/build": {
      "get": {
        "description": "build service provider metadata",
        "summary": "build service provider meta data based on settings in saml.settings table and saml.signature data",
        "tags": [
          "metadata"
        ],
        "operationId": "build sp metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Service provider code. To get provider codes use /prvd service.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return provider metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataBuild"
              }
            }
          },
          "404": {
            "description": "no settings found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/prvd/sapienza/metadata/build"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "build provider metadata",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd": {
      "get": {
        "description": "get list of providers",
        "summary": "get list of providers in saml.providers table",
        "tags": [
          "misc"
        ],
        "operationId": "get providers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of providers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/providersList"
              }
            }
          },
          "404": {
            "description": "no providers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/prvd"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "get providers",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/authnreq/build": {
      "get": {
        "description": "build athentication request",
        "summary": "build authentication request for sp specified",
        "tags": [
          "saml"
        ],
        "operationId": "build authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Service provider code. To get provider codes use /prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "idp",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "identity provider code"
          },
          {
            "name": "attrindex",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "attribute index of sp metadata"
          },
          {
            "name": "binding",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "binding type",
            "enum": [
              "redirect",
              "post"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "return authentication request",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnBuild"
              }
            }
          },
          "404": {
            "description": "no sp found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/prvd/sapienza/authnreq/build?idp=pt&attrindex=0&binding=redirect"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "build authn request",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/authnreq/verify": {
      "post": {
        "description": "verify authentication request validity",
        "summary": "verify authentication request signature and xml schema",
        "tags": [
          "saml"
        ],
        "operationId": "verify authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "request",
            "schema": {
              "$ref": "#/definitions/VerifyAuthnRequestrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "authn request valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnValid"
              }
            }
          },
          "401": {
            "description": "authn request not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify authn request",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/prvd/{cod_prvd}/authnreq/login": {
      "get": {
        "description": "build authentication request and send it to identity provider",
        "summary": "build authn request and send to idp",
        "tags": [
          "saml"
        ],
        "operationId": "login authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Sp code. To get service provider codes use /prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "idp",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "idp code"
          },
          {
            "name": "attrindex",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "attribute index of sp metadata"
          },
          {
            "name": "binding",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "binding type",
            "enum": [
              "redirect",
              "post"
            ]
          },
          {
            "name": "srelay",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "relay status code"
          }
        ],
        "responses": {
          "200": {
            "description": "return an html form and post it to idp url"
          },
          "303": {
            "description": "redirect client browser to idp url"
          },
          "404": {
            "description": "no sp found to build authn",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/prvd/uniroma1/authnreq/login?idp=pt&attrindex=0&binding=post&srelay=uniroma1_srelay1"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "login authn request (post)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/consume": {
      "post": {
        "description": "receive identity provider response, verify and parse it ",
        "summary": "receive idp response, verify and parse it",
        "tags": [
          "saml"
        ],
        "operationId": "process response",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "SAMLResponse",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "RelayState",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "idp response valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "401": {
            "description": "idp response not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": []
      }
    },
    "/assertion/validate": {
      "post": {
        "description": "verify and validate saml assertions of type EntityDescriptor, Response, AuthnRequest",
        "summary": "verify and validate saml assertions",
        "tags": [
          "misc"
        ],
        "operationId": "verify assertions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyAssertionrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "assertion OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/assertionChk"
              }
            }
          },
          "401": {
            "description": "assertion not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/assertionChk"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": []
      }
    }
  },
  "definitions": {
    "tokenOK": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "getMetadataResponse": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadata",
            "x509cert",
            "key",
            "x509certFingerPrint",
            "fingerPrintAlg"
          ],
          "properties": {
            "metadata": {
              "type": "string",
              "minLength": 1
            },
            "x509cert": {
              "type": "string",
              "minLength": 1
            },
            "key": {
              "type": "string",
              "minLength": 1
            },
            "x509certFingerPrint": {
              "type": "string",
              "minLength": 1
            },
            "fingerPrintAlg": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "tokenValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^New token successfully created$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "jose"
          ],
          "properties": {
            "jose": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "metadataValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadataValidate"
          ],
          "properties": {
            "metadataValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "assertionChk": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "assertionChk"
          ],
          "properties": {
            "assertionChk": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "metadataBuild": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadata",
            "jwt",
            "idassertion"
          ],
          "properties": {
            "metadata": {
              "type": "string",
              "minLength": 1
            },
            "jwt": {
              "type": "string",
              "minLength": 1
            },
            "idassertion": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      }
    },
    "providersList": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "providers"
          ],
          "properties": {
            "providers": {
              "type": "object",
              "minLength": 1
            }
          }
        }
      }
    },
    "VerifyTokenrequest": {
      "title": "verify token Request",
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "request"
      ],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "request": {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "VerifyMetadatarequest": {
      "title": "verify metadataRequest",
      "type": "object",
      "required": [
        "id",
        "request",
        "apiVersion"
      ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "apiVersion": {
          "description": "",
          "type": "string"
        },
        "request": {
          "type": "object",
          "required": [
            "metadata"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      }
    },
    "VerifyAssertionrequest": {
      "title": "verify assertion Request",
      "type": "object",
      "required": [
        "id",
        "request",
        "apiVersion"
      ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "apiVersion": {
          "description": "",
          "type": "string"
        },
        "request": {
          "type": "object",
          "required": [
            "assertion",
            "provider"
          ],
          "properties": {
            "assertion": {
              "type": "string"
            },
            "provider": {
              "type": "string",
              "description": "codice del provider. Può essere vuoto."
            }
          }
        }
      }
    },
    "authnBuild": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "authnrequest",
            "jwt",
            "idassertion"
          ],
          "properties": {
            "authnrequest": {
              "type": "string",
              "minLength": 1
            },
            "jwt": {
              "type": "string",
              "minLength": 1
            },
            "idassertion": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      }
    },
    "VerifyAuthnRequestrequest": {
      "title": "verify authn requestRequest",
      "type": "object",
      "required": [
        "id",
        "request",
        "apiVersion"
      ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "apiVersion": {
          "description": "",
          "type": "string"
        },
        "request": {
          "type": "object",
          "required": [
            "authnrequest"
          ],
          "properties": {
            "authnrequest": {
              "type": "string"
            }
          }
        }
      }
    },
    "authnValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "authnValidate"
          ],
          "properties": {
            "authnValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "responseValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "responseValidate"
          ],
          "properties": {
            "responseValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "APIresponse": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 100
            },
            "message": {
              "type": "string",
              "minLength": 1
            },
            "devMessage": {
              "type": "string",
              "minLength": 1
            },
            "debugMessage": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": true
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "APIrequest": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "request"
      ],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "request": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    }
  }
}
