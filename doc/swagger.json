{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "SP Spid",
    "description": "SPID gateway. API to easly work with SPID",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "contact": {
      "email": "franco.ricci@uniroma1.it"
    }
  },
  "host": "spid.uniroma1.it",
  "basePath": "/",
  "tags": [
    {
      "name": "jwt",
      "description": "Manipulate JWT token"
    },
    {
      "name": "metadata",
      "description": "Manage metadata"
    },
    {
      "name": "saml",
      "description": "work with saml assertions"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/version": {
      "get": {
        "description": "get api version",
        "summary": "version",
        "tags": [
          "misc"
        ],
        "operationId": "version",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/version"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "version",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/jwt/getByType": {
      "get": {
        "description": "Encode a jwt token specifying a token type as in jwt.token_type table",
        "summary": "Encode a jwt token of type specified",
        "tags": [
          "jwt"
        ],
        "operationId": "get token by type",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "token type. jwt1: Default jwt type, jwt2: Generic saml assertions token, jwt1_es256: jwt ECDSA 256 asymmetric keys",
            "default": "jwt1",
            "enum": [
              "jwt1",
              "jwt2",
              "jwt1_es256"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "New token createtd",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenOK"
              }
            }
          },
          "404": {
            "description": "Token type not found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/jwt/getByType?type=jwt1"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "get token by type",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/jwt/verify": {
      "get": {
        "description": "Check validity of jwt token",
        "summary": "verify token",
        "tags": [
          "jwt"
        ],
        "operationId": "verify token - get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "jwt token"
          }
        ],
        "responses": {
          "200": {
            "description": "token valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenValid"
              }
            }
          },
          "401": {
            "description": "token not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/jwt/verify?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJTZXJ2aWNlIFByb3ZpZGVycyB1c2luZyBFYXN5U1BJRCBBUEkiLCJleHAiOjE0OTQ0MzczNTMsImlhdCI6MTQ5NDQzNjE1MywiaXNzIjoiRWFzeVNQSUQgZ2F0ZXdheSIsImp0aSI6ImFhZmFlNmUzLTcwNjgtNDJkMy1hMzBlLWM1YmY0NjA2ZWUzOSIsIm5iZiI6MTQ5NDQzNjE1Mywic3ViIjoiQWNjZXNzIHRvIEVhc3lTUElEIEFQSSJ9.Ls5nY-fApQUnacXSRDvX9yv-zgOUWADGIdeB3ZRdHQ4"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "verify token",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Check validity of jwt token",
        "summary": "verify token",
        "tags": [
          "jwt"
        ],
        "operationId": "verify token - post",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyTokenrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tokenValid"
              }
            }
          },
          "401": {
            "description": "token not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "404": {
            "description": "no token found to verify",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/metadata": {
      "get": {
        "description": "Get provider metadat stored in saml.metadata table",
        "summary": "get provider metadata",
        "tags": [
          "metadata"
        ],
        "operationId": "get provider metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return provider metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/getMetadataResponse"
              }
            }
          },
          "404": {
            "description": "no metadata found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/prvd/{cod_prvd}/metadata"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "get provider metadata",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/metadata/verify": {
      "post": {
        "description": "verify metadata validity",
        "summary": "verify metadata signature and xml schema",
        "tags": [
          "metadata"
        ],
        "operationId": "verify metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VerifyMetadatarequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "application/json"
          }
        ],
        "responses": {
          "200": {
            "description": "metadata valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataValid"
              }
            }
          },
          "401": {
            "description": "metadata not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/metadata/build": {
      "get": {
        "description": "build service provider metadata",
        "summary": "build service provider meta data based on settings in saml.settings table and saml.signature data",
        "tags": [
          "metadata"
        ],
        "operationId": "build sp metadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Service provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "return provider metadata",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/metadataBuild"
              }
            }
          },
          "404": {
            "description": "no settings found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/prvd/sapienza/metadata/build"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "build provider metadata",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd": {
      "get": {
        "description": "get list of providers",
        "summary": "get list of providers in saml.providers table",
        "tags": [
          "misc"
        ],
        "operationId": "get providers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of providers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/providersList"
              }
            }
          },
          "404": {
            "description": "no providers found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/prvd"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "get providers",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/authnreq/build": {
      "get": {
        "description": "build athentication request",
        "summary": "build authentication request for sp specified",
        "tags": [
          "saml"
        ],
        "operationId": "build authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Service provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "idp",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "identity provider code"
          },
          {
            "name": "attrindex",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "attribute index of sp metadata"
          },
          {
            "name": "binding",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "binding type",
            "enum": [
              "redirect",
              "post"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "return authentication request",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnBuild"
              }
            }
          },
          "404": {
            "description": "no sp found",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/prvd/sapienza/authnreq/build?idp=pt&attrindex=0&binding=redirect"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "build authn request",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/authnreq/verify": {
      "post": {
        "description": "verify authentication request validity",
        "summary": "verify authentication request signature and xml schema",
        "tags": [
          "saml"
        ],
        "operationId": "verify authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "request",
            "schema": {
              "$ref": "#/definitions/VerifyAuthnRequestrequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "authn request valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnValid"
              }
            }
          },
          "401": {
            "description": "authn request not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/authnValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify authn request",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/authnreq/login": {
      "get": {
        "description": "build authentication request and send it to identity provider",
        "summary": "build authn request and send to idp",
        "tags": [
          "saml"
        ],
        "operationId": "login authn request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Sp code. To get service provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "idp",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "idp code"
          },
          {
            "name": "attrindex",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "attribute index of sp metadata"
          },
          {
            "name": "binding",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "binding type",
            "enum": [
              "redirect",
              "post"
            ]
          },
          {
            "name": "srelay",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "relay status code"
          }
        ],
        "responses": {
          "200": {
            "description": "return an html form and post it to idp url"
          },
          "303": {
            "description": "redirect client browser to idp url"
          },
          "404": {
            "description": "no sp found to build authn",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "GET",
              "uri": "/api/prvd/uniroma1/authnreq/login?idp=pt&attrindex=0&binding=post&srelay=uniroma1_srelay1"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "login authn request (post)",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/api/prvd/{cod_prvd}/consume": {
      "post": {
        "description": "receive identity provider response, verify and parse it ",
        "summary": "receive idp response, verify and parse it",
        "tags": [
          "saml"
        ],
        "operationId": "process response",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "cod_prvd",
            "in": "path",
            "description": "Service Provider code. To get provider codes use /api/prvd service.",
            "required": true,
            "type": "string"
          },
          {
            "name": "SAMLResponse",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "RelayState",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "authn request valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "401": {
            "description": "idp response not valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "404": {
            "description": "no sp found to verify response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/responseValid"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIresponse"
              }
            }
          }
        },
        "security": [],
        "x-unitTests": [
          {
            "request": {
              "method": "POST",
              "uri": "/api/prvd/uniroma1/consume",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "body": "SAMLResponse=&RelayState=uniroma1_srelay1"
            },
            "expectedResponse": {
              "x-allowExtraHeaders": true,
              "x-bodyMatchMode": "NONE",
              "x-arrayOrderedMatching": false,
              "x-arrayCheckCount": false,
              "x-matchResponseSchema": true,
              "headers": {}
            },
            "x-testShouldPass": true,
            "x-testEnabled": true,
            "x-testName": "response OK",
            "x-testDescription": "TODO: Add Description"
          }
        ],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "definitions": {
    "tokenOK": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "getMetadataResponse": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadata",
            "x509cert",
            "key",
            "x509certFingerPrint",
            "fingerPrintAlg"
          ],
          "properties": {
            "metadata": {
              "type": "string",
              "minLength": 1
            },
            "x509cert": {
              "type": "string",
              "minLength": 1
            },
            "key": {
              "type": "string",
              "minLength": 1
            },
            "x509certFingerPrint": {
              "type": "string",
              "minLength": 1
            },
            "fingerPrintAlg": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "tokenValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^New token successfully created$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "jose"
          ],
          "properties": {
            "jose": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "metadataValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadataValidate"
          ],
          "properties": {
            "metadataValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "metadataBuild": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "metadata",
            "jwt",
            "idassertion"
          ],
          "properties": {
            "metadata": {
              "type": "string",
              "minLength": 1
            },
            "jwt": {
              "type": "string",
              "minLength": 1
            },
            "idassertion": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      }
    },
    "providersList": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "providers"
          ],
          "properties": {
            "providers": {
              "type": "object",
              "minLength": 1
            }
          }
        }
      }
    },
    "VerifyTokenrequest": {
      "title": "verify token Request",
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "request"
      ],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "request": {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      }
    },
    "VerifyMetadatarequest": {
      "title": "verify metadataRequest",
      "type": "object",
      "required": [
        "id",
        "request",
        "apiVersion"
      ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "apiVersion": {
          "description": "",
          "type": "string"
        },
        "request": {
          "type": "object",
          "required": [
            "metadata"
          ],
          "properties": {
            "metadata": {
              "type": "string"
            }
          }
        }
      }
    },
    "authnBuild": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "authnrequest",
            "jwt",
            "idassertion"
          ],
          "properties": {
            "authnrequest": {
              "type": "string",
              "minLength": 1
            },
            "jwt": {
              "type": "string",
              "minLength": 1
            },
            "idassertion": {
              "type": "string",
              "minLength": 1
            }
          }
        }
      }
    },
    "VerifyAuthnRequestrequest": {
      "title": "verify authn requestRequest",
      "type": "object",
      "required": [
        "id",
        "request",
        "apiVersion"
      ],
      "properties": {
        "id": {
          "description": "",
          "type": "string"
        },
        "apiVersion": {
          "description": "",
          "type": "string"
        },
        "request": {
          "type": "object",
          "required": [
            "authnrequest"
          ],
          "properties": {
            "authnrequest": {
              "type": "string"
            }
          }
        }
      }
    },
    "authnValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "authnValidate"
          ],
          "properties": {
            "authnValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "responseValid": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0,
              "maximum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 200,
              "maximum": 200
            },
            "message": {
              "type": "string",
              "pattern": "^OK$",
              "minLength": 1
            }
          },
          "additionalProperties": false
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "required": [
            "responseValidate"
          ],
          "properties": {
            "responseValidate": {
              "type": "object",
              "minLength": 1
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "APIresponse": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "error",
        "result"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "message",
            "code",
            "httpcode"
          ],
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0
            },
            "httpcode": {
              "type": "integer",
              "minimum": 100
            },
            "message": {
              "type": "string",
              "minLength": 1
            },
            "devMessage": {
              "type": "string",
              "minLength": 1
            },
            "debugMessage": {
              "type": "string",
              "minLength": 1
            }
          },
          "additionalProperties": true
        },
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "result": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "APIrequest": {
      "type": "object",
      "required": [
        "id",
        "apiVersion",
        "request"
      ],
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "apiVersion": {
          "type": "string",
          "minLength": 1
        },
        "request": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    }
  }
}