[swagger]
pattern = r"/swagger-ui/(.*)"
handler = StaticHandler.StaticFileHandler
kwargs = {"path": "/wwwroot/swagger-ui"}
name = "swagger"

[doc]
pattern = r"/api/doc/(.*)"
handler = StaticHandler.StaticFileHandler
kwargs = {"path": "/wwwroot"}
name = "doc"

[access]
pattern = r"/access/(.*)"
handler = StaticHandler.StaticFileHandler
kwargs = {"path": "/wwwroot/access"}
name = "access"

;[jwt.getByType]
;pattern = r"/api/jwt/getByType"
;handler = jwtokenhandler.jwtokenHandler
;name = "jwt api get by type"
;
;[jwt.verify]
;pattern = r"/api/jwt/verify"
;handler = jwtokenhandler.jwtokenHandler
;name = "jwt api verify"
;
;[saml.assertion.valiadtesign]
;pattern = r"^/api/assertion/validate$"
;handler = easyspidhandler.easyspidHandler
;name = "saml api validate assertion"
;
;[saml.prvd]
;pattern = r"^/api/prvd$"
;handler = easyspidhandler.easyspidHandler
;name = "saml api get providers"
;
;[saml.prvd.metadata.build]
;pattern = r"^/api/prvd/[^/]+/metadata/build$"
;handler = easyspidhandler.easyspidHandler
;name = "saml api build metadata"
;
;[saml.prvd.metadata.get]
;pattern = r"^/api/prvd/[^/]+/metadata$"
;handler = easyspidhandler.easyspidHandler
;name = "saml api get metadata"
;
;[saml.prvd.metadata.verify]
;pattern = r"^/api/prvd/[^/]+/metadata/verify$"
;handler = easyspidhandler.easyspidHandler
;name = "saml api verify metadata"
;
;[saml.prvd.authnreq.build]
;pattern = r"^/api/prvd/[^/]+/authnreq/build"
;handler = easyspidhandler.easyspidHandler
;name = "saml api build Authn Request build"
;
;[saml.prvd.authnreq.verify]
;pattern = r"^/api/prvd/[^/]+/authnreq/verify"
;handler = easyspidhandler.easyspidHandler
;name = "saml api build Authn Request verify"
;
;[saml.prvd.authnreq.login]
;pattern = r"^/api/prvd/[^/]+/authnreq/login"
;handler = easyspidhandler.easyspidHandler
;name = "saml api build Authn Request login"
;
;[saml.prvd.consume]
;pattern = r"^/api/prvd/[^/]+/consume"
;handler = easyspidhandler.easyspidHandler
;name = "saml api assertion Consumer Service"
;
;[main]
;pattern = r"/.*"
;handler = MainHandler.denied


